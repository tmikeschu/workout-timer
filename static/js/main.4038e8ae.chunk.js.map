{"version":3,"sources":["icons.tsx","theme.tsx","utils/index.ts","types/index.ts","machine/index.ts","contexts/machine.tsx","atoms/NumberInput/index.tsx","organisms/Header/index.tsx","atoms/Button/index.tsx","organisms/Actions/index.tsx","molecules/AnnouncementConfig/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Day","xmlns","width","height","d","Night","colors","injectGlobal","commonTheme","error","success","themeLight","background","body","primary","primaryAlt","themeDark","defaultThemeContext","mode","window","matchMedia","matches","setTheme","ThemeContext","React","styled","emotionStyled","Button","button","theme","ThemeSwitch","onClick","secsToMS","R","minsToMS","MILLISECONDS_IN_SECOND","hoursToMS","msToSecs","msToMinutes","msToHours","padStart","maxLength","char","s","toHoursMinutesSeconds","Math","floor","fromHoursMinutesSeconds","fn","t","speakableTime","label","time","concat","String","createUUID","dt","Date","getTime","replace","c","r","random","toString","LocalStorageKeys","defaultTime","Number","localStorage","getItem","DEFAULT_TIME","machineConfig","initial","id","context","initialTime","currentTime","announcementTimes","invoke","src","states","idle","on","START","RESET","actions","SET_TIME","SET_ANNOUNCEMENT_TIMES","internal","running","entry","target","cond","STOP","COUNT_DOWN","ANNOUNCE","forwardTo","complete","after","500","machineOptions","setAnnouncements","assign","event","type","payload","setTime","countDown","reset","announceStart","send","message","announceEnd","services","timer","cb","interval","setInterval","clearInterval","Machine","service","interpret","appMachine","start","initialState","bind","AppMachineContext","createContext","Consumer","Container","input","NumberInput","props","div","Time","Header","current","hms","map","hours","minutes","seconds","data-testid","max","min","onChange","e","value","Actions","fresh","disabled","draft","push","Checkbox","TextInput","AnnouncementConfig","PropTypes","shape","string","isRequired","number","bool","config","changeNotifications","i","findIndex","checked","htmlFor","placeholder","Boolean","Announcements","App","key","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","rootElement","document","getElementById","render","children","hasMounted","setThemeState","lsMode","useEffectDarkMode","themeState","Provider","light","dark","setItem","machine","useMachine","storeTime","_","plantAnnouncements","startedAt","now","timeouts","setTimeout","filter","join","forEach","clearTimeout","announcer","onEvent","speakable","SpeechSynthesisUtterance","text","speechSynthesis","speak","cancel","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4038e8ae.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Day: React.FC<{}> = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\">\n    <path d=\"M12 7a5 5 0 110 10 5 5 0 010-10m0 2a3 3 0 100 6 3 3 0 000-6m0-7l2 3a7 7 0 00-4 0l2-3M3 7h5a7 7 0 00-3 4L3 7m0 10l2-4a7 7 0 003 4H3M21 7l-2 4a7 7 0 00-2-4h4m0 10h-4a7 7 0 002-4l2 4m-9 5l-2-3h4l-2 3z\" />\n  </svg>\n);\n\nexport const Night: React.FC<{}> = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\">\n    <path d=\"M18 4l-3 2 1 3-2-2-3 2 1-3-3-2h3l2-3 1 3h3m3 7l-1 1v2l-1-1-2 1v-2l-1-1h2l1-2v2h2m-2 5c1 0 2 1 1 2l-1 1c-4 4-10 4-14 0A10 10 0 016 4c1-1 2 0 2 1a10 10 0 0011 11m-2 2c-2 0-5-1-7-3-3-3-4-5-4-8a8 8 0 0011 11z\" />\n  </svg>\n);\n","import * as React from \"react\";\nimport emotionStyled, { CreateStyled } from \"@emotion/styled\";\nimport { injectGlobal } from \"emotion\";\nimport { ThemeProvider as EmotionProvider } from \"emotion-theming\";\nimport { Day, Night } from \"./icons\";\n\nconst colors = {\n  white: \"#FBFEF9\",\n  gray: \"#F3EFF5\",\n  black: \"#1C2826\",\n  red: \"#ef3054\",\n  green: \"#43AA8B\",\n  cerullean: \"#3454D1\",\n  lightBlue: \"#715AFF\",\n  darkBlue: \"#0E0E52\",\n  salmon: \"#F49390\"\n};\n\ninjectGlobal`\n  html, body {\n    padding: 0;\n    margin: 0;\n    font-family: 'Inconsolata', sans-serif;\n  }\n\n  * {\n    box-sizing: border-box;\n    transition: background-color 300ms;\n  }\n`;\n\ninterface CommonTheme {\n  error: string;\n  success: string;\n}\n\nexport type Theme = CommonTheme & {\n  background: string;\n  body: string;\n  primary: string;\n  primaryAlt: string;\n};\n\nconst commonTheme: CommonTheme = {\n  error: colors.red,\n  success: colors.green\n};\n\nconst themeLight: Theme = {\n  ...commonTheme,\n  background: colors.gray,\n  body: colors.black,\n  primary: colors.salmon,\n  primaryAlt: colors.white\n};\n\nconst themeDark: Theme = {\n  ...commonTheme,\n  background: colors.black,\n  body: colors.white,\n  primary: colors.cerullean,\n  primaryAlt: colors.white\n};\n\nconst theme = (mode: ThemeContext[\"mode\"]): Theme =>\n  mode === \"dark\" ? themeDark : themeLight;\n\ninterface ThemeContext {\n  mode: \"dark\" | \"light\";\n  setTheme: (mode?: ThemeContext[\"mode\"]) => void;\n}\n\nconst defaultThemeContext: ThemeContext = {\n  mode:\n    window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      ? \"dark\"\n      : \"light\",\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setTheme: () => {}\n};\n\nconst ThemeContext = React.createContext(defaultThemeContext);\nexport const useTheme = (): ThemeContext => React.useContext(ThemeContext);\n\ntype UseEffectDarkMode = Pick<ThemeContext, \"mode\"> & { hasMounted: boolean };\nconst useEffectDarkMode = (): [\n  UseEffectDarkMode,\n  React.Dispatch<React.SetStateAction<UseEffectDarkMode>>\n] => {\n  const state = React.useState<UseEffectDarkMode>({\n    mode: defaultThemeContext.mode,\n    hasMounted: false\n  });\n  const [, setThemeState] = state;\n\n  React.useEffect(() => {\n    const lsMode = (localStorage.getItem(\"mode\") ||\n      \"dark\") as ThemeContext[\"mode\"];\n    setThemeState(state => ({ ...state, mode: lsMode, hasMounted: true }));\n  }, [setThemeState]);\n\n  return state;\n};\n\nexport const ThemeProvider: React.FC<{}> = ({ children }) => {\n  const [themeState, setThemeState] = useEffectDarkMode();\n  if (!themeState.hasMounted) {\n    return <div />;\n  }\n\n  const setTheme = (mode?: ThemeContext[\"mode\"]): void => {\n    const nextThemes = {\n      light: \"dark\",\n      dark: \"light\"\n    };\n    if (!mode) {\n      mode = nextThemes[themeState.mode] as ThemeContext[\"mode\"];\n    }\n    localStorage.setItem(\"mode\", mode);\n    setThemeState(state => ({ ...state, mode } as UseEffectDarkMode));\n  };\n\n  return (\n    <EmotionProvider theme={theme(themeState.mode)}>\n      <ThemeContext.Provider\n        value={{\n          mode: themeState.mode,\n          setTheme\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    </EmotionProvider>\n  );\n};\n\nexport const styled = emotionStyled as CreateStyled<Theme>;\n\nconst Button = styled.button`\n  background-color: transparent;\n  border: none;\n  svg {\n    fill: ${({ theme }): string => theme.body};\n  }\n`;\n\nexport const ThemeSwitch: React.FC<{}> = () => {\n  const { mode, setTheme } = React.useContext(ThemeContext);\n  return (\n    <Button\n      onClick={(): void => {\n        setTheme();\n      }}\n    >\n      {mode === \"light\" ? <Day /> : <Night />}\n    </Button>\n  );\n};\n","import * as R from \"ramda\";\n\nconst MILLISECONDS_IN_SECOND = 1000;\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;\nconst MILLISECONDS_IN_HOUR =\n  MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE * MINUTES_IN_HOUR;\n\nexport const secsToMS = R.multiply(MILLISECONDS_IN_SECOND);\nexport const minsToMS = R.multiply(MILLISECONDS_IN_MINUTE);\nexport const hoursToMS = R.multiply(MILLISECONDS_IN_HOUR);\nexport const msToSecs = R.divide(R.__, MILLISECONDS_IN_SECOND);\nexport const msToMinutes = R.divide(R.__, MILLISECONDS_IN_MINUTE);\nexport const msToHours = R.divide(R.__, MILLISECONDS_IN_HOUR);\n\nexport const padStart = R.curry(\n  (maxLength: number, char: string, s: string) => {\n    return s.padStart(maxLength, char);\n  }\n);\n\nexport const toHoursMinutesSeconds = R.juxt([\n  R.pipe(msToHours, R.modulo(R.__, HOURS_IN_DAY), Math.floor),\n  R.pipe(msToMinutes, R.modulo(R.__, MINUTES_IN_HOUR), Math.floor),\n  R.pipe(msToSecs, R.modulo(R.__, SECONDS_IN_MINUTE), Math.floor)\n]);\n\nfunction call<T, U>(fn: (t: T) => U, t: T): U {\n  return fn(t);\n}\n\nexport const fromHoursMinutesSeconds = R.pipe(\n  R.zipWith<(n: number) => number, number, number>(call, [\n    hoursToMS,\n    minsToMS,\n    secsToMS\n  ]),\n  R.sum\n);\n\nexport const speakableTime = R.pipe(\n  toHoursMinutesSeconds,\n  R.zip([\"hour\", \"minute\", \"second\"]),\n  R.map(\n    R.ifElse(\n      R.pipe(R.last, R.gt(R.__, 0)),\n      ([label, time]) => `${time} ${label}${time === 1 ? \"\" : \"s\"}`,\n      R.always(\"\")\n    )\n  ),\n  R.join(\". \"),\n  s => s.concat(\".\")\n);\n\nexport const formatTime = R.pipe(\n  toHoursMinutesSeconds,\n  R.map(R.pipe(String, padStart(2, \"0\"))),\n  R.join(\":\")\n);\n\nexport function createUUID(): string {\n  let dt = new Date().getTime();\n  const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(\n    c\n  ) {\n    const r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n  return uuid;\n}\n","export type IAnnouncementConfig = {\n  id: string;\n  time: number;\n  interval: boolean;\n  message?: string;\n};\n\nexport type AppMachineSchema = {\n  states: {\n    idle: {};\n    running: {};\n    complete: {};\n  };\n};\n\nexport type StartEvent = {\n  type: \"START\";\n};\n\nexport type SetTimeEvent = {\n  type: \"SET_TIME\";\n  payload: { time: number };\n};\n\nexport type SetAnnouncementTimesEvent = {\n  type: \"SET_ANNOUNCEMENT_TIMES\";\n  payload: { announcementTimes: IAnnouncementConfig[] };\n};\n\nexport type AnnounceEvent = {\n  type: \"ANNOUNCE\";\n  payload: { message: string };\n};\n\nexport type AppMachineEvent =\n  | AnnounceEvent\n  | StartEvent\n  | SetTimeEvent\n  | SetAnnouncementTimesEvent\n  | { type: \"STOP\" }\n  | { type: \"COUNT_DOWN\" }\n  | { type: \"RESET\" };\n\nexport type AppMachineContext = {\n  initialTime: number;\n  currentTime: number;\n  announcementTimes: IAnnouncementConfig[];\n};\n\nexport enum LocalStorageKeys {\n  DEFAULT_TIME = \"defaultTime\"\n}\n","import {\n  MachineConfig,\n  MachineOptions,\n  assign,\n  Machine,\n  forwardTo,\n  send\n} from \"xstate\";\nimport { minsToMS, secsToMS } from \"utils\";\nimport {\n  AppMachineEvent as Event,\n  AppMachineSchema as Schema,\n  AppMachineContext as Context,\n  LocalStorageKeys\n} from \"types\";\n\nconst defaultTime = Number(\n  localStorage.getItem(LocalStorageKeys.DEFAULT_TIME) || minsToMS(6)\n);\n\nexport const machineConfig: MachineConfig<Context, Schema, Event> = {\n  initial: \"idle\",\n  id: \"main\",\n  context: {\n    initialTime: defaultTime,\n    currentTime: defaultTime,\n    announcementTimes: []\n  },\n  invoke: [{ src: \"announcer\", id: \"announcer\" }],\n  states: {\n    idle: {\n      on: {\n        START: \"running\",\n        RESET: {\n          actions: [\"reset\"]\n        },\n        SET_TIME: {\n          actions: [\"setTime\", \"storeTime\"]\n        },\n        SET_ANNOUNCEMENT_TIMES: {\n          internal: false,\n          actions: [\"setAnnouncements\"]\n        }\n      }\n    },\n    running: {\n      entry: [\"announceStart\"],\n      invoke: [\n        { src: \"timer\", id: \"timer\" },\n        { src: \"plantAnnouncements\", id: \"plantAnnouncements\" }\n      ],\n      on: {\n        \"\": {\n          target: \"complete\",\n          cond: ({ currentTime }): boolean => currentTime <= 0\n        },\n        STOP: \"idle\",\n        COUNT_DOWN: {\n          actions: [\"countDown\"]\n        },\n        ANNOUNCE: {\n          actions: forwardTo(\"announcer\")\n        }\n      }\n    },\n    complete: {\n      entry: [\"announceEnd\"],\n      on: {\n        ANNOUNCE: {\n          actions: forwardTo(\"announcer\")\n        }\n      },\n      after: {\n        500: \"idle\"\n      }\n    }\n  }\n};\n\nexport const machineOptions: Partial<MachineOptions<Context, Event>> = {\n  actions: {\n    // define \"storeTime\" in AppMachineProvider\n    setAnnouncements: assign<Context, Event>({\n      announcementTimes: (context, event) => {\n        if (event.type === \"SET_ANNOUNCEMENT_TIMES\") {\n          return event.payload.announcementTimes;\n        }\n        return context.announcementTimes;\n      }\n    }),\n    setTime: assign<Context, Event>({\n      initialTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.initialTime,\n      currentTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.currentTime\n    }),\n    countDown: assign<Context, Event>({\n      currentTime: context => context.currentTime - secsToMS(1)\n    }),\n    reset: assign<Context, Event>({\n      currentTime: context => context.initialTime\n    }),\n    announceStart: send<Context, Event>({\n      type: \"ANNOUNCE\",\n      payload: { message: \"Let's go\" }\n    }),\n    announceEnd: send<Context, Event>({\n      type: \"ANNOUNCE\",\n      payload: { message: \"Time. Great job!\" }\n    })\n  },\n  services: {\n    // define \"announcer\" in AppMachineProvider\n    // define \"plantAnnouncements\" in AppMachineProvider\n    timer: () => (cb): (() => void) => {\n      const interval = setInterval(() => {\n        cb(\"COUNT_DOWN\");\n      }, secsToMS(1));\n      return (): void => {\n        clearInterval(interval);\n      };\n    }\n  }\n};\n\nexport default Machine(machineConfig, machineOptions);\n","import React, { ReactElement, Props, Context } from \"react\";\nimport { State, Interpreter, interpret } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\nimport appMachine from \"machine\";\nimport { secsToMS, speakableTime } from \"utils\";\nimport {\n  AppMachineEvent,\n  AppMachineSchema,\n  AppMachineContext as AppMachineExtendedState,\n  AnnounceEvent,\n  LocalStorageKeys\n} from \"types\";\n\ntype UseableMachine = [\n  State<AppMachineExtendedState, AppMachineEvent>,\n  Interpreter<\n    AppMachineExtendedState,\n    AppMachineSchema,\n    AppMachineEvent\n  >[\"send\"],\n  Interpreter<AppMachineExtendedState, AppMachineSchema, AppMachineEvent>\n];\n\ntype AppContextState = UseableMachine;\n\nconst service = interpret(appMachine);\nservice.start();\nconst initialState: AppContextState = [\n  service.initialState,\n  service.send.bind(service),\n  service\n];\n\nexport const AppMachineContext = React.createContext<AppContextState>(\n  initialState\n);\n\nexport const AppMachineProvider = ({\n  children\n}: Props<Context<{}>>): ReactElement => {\n  const machine = useMachine<AppMachineExtendedState, AppMachineEvent>(\n    appMachine,\n    {\n      actions: {\n        storeTime: (_, event): void => {\n          if (event.type === \"SET_TIME\") {\n            localStorage.setItem(\n              LocalStorageKeys.DEFAULT_TIME,\n              String(event.payload.time)\n            );\n          }\n        }\n      },\n      services: {\n        plantAnnouncements: context => (cb): (() => void) => {\n          const startedAt = new Date().getTime();\n          const getTime = (): number => {\n            const now = new Date().getTime();\n            // HACK not sure why but without the - 1000 the announcement occurs at\n            // the right time but announces a second less than the desired time\n            return context.initialTime - (now - startedAt - 1000);\n          };\n\n          const timeouts = context.announcementTimes.map(config => {\n            const timingFn = config.interval ? setInterval : setTimeout;\n            const id = timingFn(() => {\n              const message = [speakableTime(getTime()), config.message]\n                .filter(Boolean)\n                .join(\". \")\n                .concat(\".\");\n\n              cb({ type: \"ANNOUNCE\", payload: { message } });\n            }, secsToMS(config.time));\n            return { ...config, id };\n          });\n\n          return (): void => {\n            timeouts.forEach(config => {\n              const clearTimingFn = config.interval\n                ? clearInterval\n                : clearTimeout;\n              clearTimingFn(config.id);\n            });\n          };\n        },\n        announcer: () => (_, onEvent): (() => void) => {\n          const speakable = new SpeechSynthesisUtterance();\n          onEvent(event => {\n            if (event.type === \"ANNOUNCE\") {\n              speakable.text = (event as AnnounceEvent).payload.message;\n              window.speechSynthesis.speak(speakable);\n            }\n          });\n          return (): void => {\n            window.speechSynthesis.cancel();\n          };\n        }\n      }\n    }\n  );\n\n  return (\n    <AppMachineContext.Provider value={machine}>\n      {children}\n    </AppMachineContext.Provider>\n  );\n};\n\nexport const AppMachineConsumer = AppMachineContext.Consumer;\n","import * as React from \"react\";\nimport { styled } from \"theme\";\n\nconst Container = styled.input`\n  border: none;\n  background: transparent;\n  color: ${({ theme }): string => theme.body};\n  font-size: 4rem;\n  /* Chrome, Safari, Edge, Opera */\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst NumberInput: React.FC<React.HTMLProps<HTMLInputElement>> = props => {\n  return <Container type=\"number\" {...props} />;\n};\n\nexport default NumberInput;\n","import * as React from \"react\";\nimport { styled, ThemeSwitch } from \"theme\";\nimport { toHoursMinutesSeconds, fromHoursMinutesSeconds } from \"utils\";\nimport { AppMachineContext } from \"contexts/machine\";\nimport NumberInput from \"atoms/NumberInput\";\n\nconst Container = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Time = styled.div`\n  width: 100%;\n  font-size: 4rem;\n  text-align: center;\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Header: React.FC<{}> = () => {\n  const [current, send] = React.useContext(AppMachineContext);\n\n  const hms = toHoursMinutesSeconds(current.context.currentTime);\n\n  const changeHours = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const hours = Number(e.target.value);\n    const time = fromHoursMinutesSeconds([hours, hms[1], hms[2]]);\n    send({ type: \"SET_TIME\", payload: { time } });\n  };\n\n  const changeMinutes = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const minutes = Number(e.target.value);\n    const time = fromHoursMinutesSeconds([hms[0], minutes, hms[2]]);\n    send({ type: \"SET_TIME\", payload: { time } });\n  };\n\n  const changeSeconds = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const seconds = Number(e.target.value);\n    const time = fromHoursMinutesSeconds([hms[0], hms[1], seconds]);\n    send({ type: \"SET_TIME\", payload: { time } });\n  };\n\n  const [hours, minutes, seconds] = hms.map(time =>\n    String(time).padStart(2, \"0\")\n  );\n\n  return (\n    <Container data-testid=\"Header\">\n      <h1>Workout Timer</h1>\n      <ThemeSwitch />\n      <Time>\n        <NumberInput\n          max={24}\n          min={0}\n          maxLength={2}\n          data-testid=\"Header__hours\"\n          onChange={changeHours}\n          value={hours}\n        />\n        <span>:</span>\n        <NumberInput\n          max={59}\n          min={0}\n          data-testid=\"Header__minutes\"\n          onChange={changeMinutes}\n          value={minutes}\n        />\n        <span>:</span>\n        <NumberInput\n          max={59}\n          min={0}\n          data-testid=\"Header__seconds\"\n          onChange={changeSeconds}\n          value={seconds}\n        />\n      </Time>\n    </Container>\n  );\n};\n\nexport default Header;\n","import * as React from \"react\";\nimport { styled } from \"theme\";\n\nconst Container = styled.button`\n  background-color: ${({ theme }): string => theme.primary};\n  color: ${({ theme }): string => theme.primaryAlt};\n  border: none;\n  padding: 0.5rem 1rem;\n  font-family: inherit;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 414px;\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:hover,\n  &:focus {\n    filter: brightness(0.75);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    filter: brightness(1);\n    cursor: default;\n  }\n`;\n\nconst Button: React.FC<React.HTMLProps<HTMLButtonElement>> = ({\n  type: _,\n  ...props\n}) => {\n  return <Container {...props} />;\n};\n\nexport default Button;\n","import * as React from \"react\";\nimport { styled } from \"theme\";\nimport Button from \"atoms/Button\";\nimport { AppMachineContext } from \"contexts/machine\";\nimport { createUUID } from \"utils\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 1rem;\n  justify-content: space-between;\n`;\n\nconst Actions: React.FC<{}> = () => {\n  const [current, send] = React.useContext(AppMachineContext);\n  const addAnnouncement = (): void => {\n    const draft = [...current.context.announcementTimes];\n    draft.push({ time: 0, interval: false, id: createUUID() });\n    send({\n      type: \"SET_ANNOUNCEMENT_TIMES\",\n      payload: { announcementTimes: draft }\n    });\n  };\n  const fresh = current.context.initialTime === current.context.currentTime;\n  const start = (): void => {\n    send(\"START\");\n  };\n\n  return (\n    <Container>\n      <Button disabled={current.matches(\"running\")} onClick={start}>\n        Start\n      </Button>\n      <Button\n        disabled={!current.matches(\"running\")}\n        onClick={(): void => {\n          send(\"STOP\");\n        }}\n      >\n        Stop\n      </Button>\n\n      <Button\n        disabled={fresh || current.matches(\"running\")}\n        onClick={(): void => {\n          send(\"RESET\");\n        }}\n      >\n        Reset\n      </Button>\n      <Button\n        data-testid=\"Actions__addAnnouncement\"\n        onClick={addAnnouncement}\n        disabled={!fresh || current.matches(\"running\")}\n      >\n        Add Announcement\n      </Button>\n    </Container>\n  );\n};\n\nexport default Actions;\n","import * as React from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\nimport { styled } from \"theme\";\nimport { IAnnouncementConfig } from \"types\";\nimport { AppMachineContext } from \"contexts/machine\";\nimport NumberInput from \"atoms/NumberInput\";\n\nconst Container = styled.div`\n  background-color: ${({ theme }): string => theme.background};\n  color: ${({ theme }): string => theme.body};\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.25);\n  padding: 1.5rem;\n  width: 100%;\n  max-width: 414px;\n  margin-bottom: 1rem;\n  overflow: hidden;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  & > div {\n    label {\n      font-size: 1rem;\n    }\n  }\n`;\n\nconst Checkbox = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  input {\n    transform: scale(2);\n  }\n`;\n\nconst TextInput = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  label {\n    position: absolute;\n    top: -0.625rem;\n    left: 1rem;\n    background-color: ${({ theme }): string => theme.background};\n    padding: 0 0.25rem;\n  }\n\n  input {\n    width: 100%;\n    background-color: ${({ theme }): string => theme.background};\n    color: ${({ theme }): string => theme.body};\n    padding: 0.5rem;\n    font-size: 1.5rem;\n    border: 2px solid ${({ theme }): string => theme.primary};\n  }\n`;\n\nconst propTypes = {\n  config: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    time: PropTypes.number.isRequired,\n    message: PropTypes.string,\n    interval: PropTypes.bool.isRequired\n  }).isRequired\n};\n\ninterface Props extends InferProps<typeof propTypes> {\n  config: IAnnouncementConfig;\n}\n\nconst AnnouncementConfig: React.FC<Props> = ({ config }) => {\n  const [current, send] = React.useContext(AppMachineContext);\n\n  const changeNotifications = (id: string) => (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const draft = [...current.context.announcementTimes];\n    const i = draft.findIndex(config => id === config.id);\n    if (i != null) {\n      switch (e.target.type as \"checkbox\" | \"number\" | \"text\") {\n        case \"checkbox\": {\n          draft[i].interval = e.target.checked;\n          break;\n        }\n        case \"number\": {\n          draft[i].time = Number(e.target.value);\n          break;\n        }\n        case \"text\": {\n          draft[i].message = e.target.value;\n          break;\n        }\n      }\n      send({\n        type: \"SET_ANNOUNCEMENT_TIMES\",\n        payload: { announcementTimes: draft }\n      });\n    }\n  };\n\n  return (\n    <Container data-testid=\"AnnouncementConfig\">\n      <TextInput>\n        <label htmlFor={`seconds:${config.id}`}>Seconds</label>\n        <NumberInput\n          data-testid=\"AnnouncementConfig__time\"\n          disabled={current.matches(\"running\")}\n          value={config.time}\n          onChange={changeNotifications(config.id)}\n        />\n      </TextInput>\n\n      <TextInput>\n        <label htmlFor={`message:${config.id}`}>Message</label>\n        <input\n          data-testid=\"AnnouncementConfig__message\"\n          disabled={current.matches(\"running\")}\n          placeholder=\"Woohoo!\"\n          id={`interval:${config.id}`}\n          type=\"text\"\n          value={config.message || \"\"}\n          onChange={changeNotifications(config.id)}\n        />\n      </TextInput>\n\n      <Checkbox>\n        <label htmlFor={`interval:${config.id}`}>Interval:</label>\n        <input\n          data-testid=\"AnnouncementConfig__interval\"\n          disabled={current.matches(\"running\")}\n          id={`interval:${config.id}`}\n          type=\"checkbox\"\n          checked={Boolean(config.interval)}\n          onChange={changeNotifications(config.id)}\n        />\n      </Checkbox>\n    </Container>\n  );\n};\n\nAnnouncementConfig.propTypes = propTypes;\n\nexport default AnnouncementConfig;\n","import * as React from \"react\";\nimport { styled } from \"./theme\";\nimport Header from \"organisms/Header\";\nimport Actions from \"organisms/Actions\";\nimport AnnouncementConfig from \"molecules/AnnouncementConfig\";\nimport { AppMachineContext } from \"contexts/machine\";\n\nconst Container = styled.div`\n  background-color: ${({ theme }): string => theme.background};\n  color: ${({ theme }): string => theme.body};\n  min-height: 100vh;\n  -webkit-overflow-scrolling: touch; /* Lets it scroll lazy */\n  width: 100vw;\n  max-width: 414px;\n  margin: 0 auto;\n\n  &:after {\n    width: 100vw;\n    height: 100vh;\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: ${({ theme }): string => theme.body};\n    filter: brightness(0.75);\n    z-index: -1;\n  }\n`;\n\nconst Announcements = styled.div`\n  padding: 0 1rem;\n`;\n\nconst App: React.FC<{}> = () => {\n  const [current] = React.useContext(AppMachineContext);\n\n  return (\n    <Container data-testid=\"App\">\n      <Header />\n      <Actions />\n      <Announcements>\n        {current.context.announcementTimes.map(config => (\n          <AnnouncementConfig key={config.id} config={config} />\n        ))}\n      </Announcements>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { ThemeProvider } from \"./theme\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppMachineProvider } from \"contexts/machine\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <ThemeProvider>\n    <AppMachineProvider>\n      <App />\n    </AppMachineProvider>\n  </ThemeProvider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}