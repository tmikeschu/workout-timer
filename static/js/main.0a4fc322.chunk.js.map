{"version":3,"sources":["icons.tsx","theme.tsx","utils.ts","machine.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Day","xmlns","width","height","d","Night","colors","injectGlobal","commonTheme","error","success","themeLight","background","body","primary","primaryAlt","themeDark","defaultThemeContext","mode","setTheme","ThemeContext","React","styled","emotionStyled","Button","button","theme","ThemeSwitch","onClick","secsToMS","seconds","minsToMS","minutes","padStart","R","maxLength","char","s","hoursMinutesSeconds","t","Math","floor","formatTime","String","machineConfig","initial","id","context","initialTime","currentTime","notificationTimes","states","idle","on","START","RESET","actions","SET_TIME","SET_NOTIFICATION_TIMES","internal","running","invoke","src","target","cond","STOP","COUNT_DOWN","machineOptions","setNotifications","assign","event","type","payload","setTime","time","countDown","reset","services","timer","cb","interval","setInterval","clearInterval","Machine","Container","div","Header","Checkbox","TextInput","Time","h2","Actions","NotificationConfig","App","useMachine","plantNotifications","startedAt","Date","getTime","timeouts","map","config","setTimeout","speakable","SpeechSynthesisUtterance","message","hours","msg","speakableTime","now","window","speechSynthesis","speak","forEach","clearTimeout","current","send","changeNotifications","i","e","draft","checked","Number","value","fresh","disabled","matches","push","key","htmlFor","onChange","placeholder","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","rootElement","document","getElementById","render","children","hasMounted","setThemeState","lsMode","localStorage","getItem","useEffectDarkMode","themeState","Provider","light","dark","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0a4fc322.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Day: React.FC<{}> = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\">\n    <path d=\"M12 7a5 5 0 110 10 5 5 0 010-10m0 2a3 3 0 100 6 3 3 0 000-6m0-7l2 3a7 7 0 00-4 0l2-3M3 7h5a7 7 0 00-3 4L3 7m0 10l2-4a7 7 0 003 4H3M21 7l-2 4a7 7 0 00-2-4h4m0 10h-4a7 7 0 002-4l2 4m-9 5l-2-3h4l-2 3z\" />\n  </svg>\n);\n\nexport const Night: React.FC<{}> = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\">\n    <path d=\"M18 4l-3 2 1 3-2-2-3 2 1-3-3-2h3l2-3 1 3h3m3 7l-1 1v2l-1-1-2 1v-2l-1-1h2l1-2v2h2m-2 5c1 0 2 1 1 2l-1 1c-4 4-10 4-14 0A10 10 0 016 4c1-1 2 0 2 1a10 10 0 0011 11m-2 2c-2 0-5-1-7-3-3-3-4-5-4-8a8 8 0 0011 11z\" />\n  </svg>\n);\n","import * as React from \"react\";\nimport emotionStyled, { CreateStyled } from \"@emotion/styled\";\nimport { injectGlobal } from \"emotion\";\nimport { ThemeProvider as EmotionProvider } from \"emotion-theming\";\nimport { Day, Night } from \"./icons\";\n\nconst colors = {\n  white: \"#FBFEF9\",\n  gray: \"#F3EFF5\",\n  black: \"#1C2826\",\n  red: \"#ef3054\",\n  green: \"#43AA8B\",\n  cerullean: \"#3454D1\",\n  lightBlue: \"#715AFF\",\n  darkBlue: \"#0E0E52\",\n  salmon: \"#F49390\"\n};\n\ninjectGlobal`\n  html, body {\n    padding: 0;\n    margin: 0;\n    font-family: 'Inconsolata', sans-serif;\n  }\n\n  * {\n    box-sizing: border-box;\n    transition: background-color 300ms;\n  }\n`;\n\ninterface CommonTheme {\n  error: string;\n  success: string;\n}\n\nexport type Theme = CommonTheme & {\n  background: string;\n  body: string;\n  primary: string;\n  primaryAlt: string;\n};\n\nconst commonTheme: CommonTheme = {\n  error: colors.red,\n  success: colors.green\n};\n\nconst themeLight: Theme = {\n  ...commonTheme,\n  background: colors.gray,\n  body: colors.black,\n  primary: colors.salmon,\n  primaryAlt: colors.white\n};\n\nconst themeDark: Theme = {\n  ...commonTheme,\n  background: colors.black,\n  body: colors.white,\n  primary: colors.cerullean,\n  primaryAlt: colors.white\n};\n\nconst theme = (mode: ThemeContext[\"mode\"]): Theme =>\n  mode === \"dark\" ? themeDark : themeLight;\n\ninterface ThemeContext {\n  mode: \"dark\" | \"light\";\n  setTheme: (mode?: ThemeContext[\"mode\"]) => void;\n}\n\nconst defaultThemeContext: ThemeContext = {\n  mode: \"light\",\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setTheme: () => {}\n};\n\nconst ThemeContext = React.createContext(defaultThemeContext);\nexport const useTheme = (): ThemeContext => React.useContext(ThemeContext);\n\ntype UseEffectDarkMode = Pick<ThemeContext, \"mode\"> & { hasMounted: boolean };\nconst useEffectDarkMode = (): [\n  UseEffectDarkMode,\n  React.Dispatch<React.SetStateAction<UseEffectDarkMode>>\n] => {\n  const state = React.useState<UseEffectDarkMode>({\n    mode: defaultThemeContext.mode,\n    hasMounted: false\n  });\n  const [, setThemeState] = state;\n\n  React.useEffect(() => {\n    const lsMode = (localStorage.getItem(\"mode\") ||\n      \"light\") as ThemeContext[\"mode\"];\n    setThemeState(state => ({ ...state, mode: lsMode, hasMounted: true }));\n  }, [setThemeState]);\n\n  return state;\n};\n\nexport const ThemeProvider: React.FC<{}> = ({ children }) => {\n  const [themeState, setThemeState] = useEffectDarkMode();\n  if (!themeState.hasMounted) {\n    return <div />;\n  }\n\n  const setTheme = (mode?: ThemeContext[\"mode\"]): void => {\n    const nextThemes = {\n      light: \"dark\",\n      dark: \"light\"\n    };\n    if (!mode) {\n      mode = nextThemes[themeState.mode] as ThemeContext[\"mode\"];\n    }\n    setThemeState(state => ({ ...state, mode } as UseEffectDarkMode));\n  };\n\n  return (\n    <EmotionProvider theme={theme(themeState.mode)}>\n      <ThemeContext.Provider\n        value={{\n          mode: themeState.mode,\n          setTheme\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    </EmotionProvider>\n  );\n};\n\nexport const styled = emotionStyled as CreateStyled<Theme>;\n\nconst Button = styled.button`\n  background-color: transparent;\n  border: none;\n  svg {\n    fill: ${({ theme }): string => theme.body};\n  }\n`;\n\nexport const ThemeSwitch: React.FC<{}> = () => {\n  const { mode, setTheme } = React.useContext(ThemeContext);\n  return (\n    <Button\n      onClick={(): void => {\n        setTheme();\n      }}\n    >\n      {mode === \"light\" ? <Day /> : <Night />}\n    </Button>\n  );\n};\n","import * as R from \"ramda\";\n\nexport const secsToMS = (seconds: number): number => seconds * 1000;\n\nexport const minsToMS = (minutes: number): number => secsToMS(minutes * 60);\n\nexport const padStart = R.curry(\n  (maxLength: number, char: string, s: string) => {\n    return s.padStart(maxLength, char);\n  }\n);\n\nexport const hoursMinutesSeconds = R.juxt([\n  (t: number): number => Math.floor((t / (1000 * 60 * 60)) % 24),\n  (t: number): number => Math.floor((t / (1000 * 60)) % 60),\n  (t: number): number => Math.floor((t / 1000) % 60)\n]);\n\nexport const speakableTime = (time: number): string => {\n  const [hours, minutes, seconds] = hoursMinutesSeconds(time);\n  let msg = \"\";\n  if (hours > 0) {\n    msg += `${hours} hour${hours === 1 ? \"\" : \"s\"}. `;\n  }\n  if (minutes > 0) {\n    msg += `${minutes} minute${minutes === 1 ? \"\" : \"s\"}. `;\n  }\n  if (seconds > 0) {\n    msg += `${seconds} second${seconds === 1 ? \"\" : \"s\"}`;\n  }\n  return msg;\n};\n\nexport const formatTime = R.pipe(\n  hoursMinutesSeconds,\n  R.map(R.pipe(String, padStart(2, \"0\"))),\n  R.join(\":\")\n);\n","import { MachineConfig, MachineOptions, assign, Machine } from \"xstate\";\nimport { minsToMS, secsToMS } from \"./utils\";\n\ntype Schema = {\n  states: {\n    idle: {};\n    running: {};\n  };\n};\n\ntype StartEvent = {\n  type: \"START\";\n};\ntype SetTimeEvent = {\n  type: \"SET_TIME\";\n  payload: { time: number };\n};\ntype SetNotificationsTimesEvent = {\n  type: \"SET_NOTIFICATION_TIMES\";\n  payload: { notificationTimes: NotificationConfig[] };\n};\ntype Event =\n  | StartEvent\n  | SetTimeEvent\n  | SetNotificationsTimesEvent\n  | { type: \"STOP\" }\n  | { type: \"COUNT_DOWN\" }\n  | { type: \"RESET\" };\n\ntype NotificationConfig = { time: number; interval: boolean; message?: string };\ntype Context = {\n  initialTime: number;\n  currentTime: number;\n  notificationTimes: NotificationConfig[];\n};\n\nexport const machineConfig: MachineConfig<Context, Schema, Event> = {\n  initial: \"idle\",\n  id: \"main\",\n  context: {\n    initialTime: minsToMS(6),\n    currentTime: minsToMS(6),\n    notificationTimes: []\n  },\n  states: {\n    idle: {\n      on: {\n        START: \"running\",\n        RESET: {\n          actions: [\"reset\"]\n        },\n        SET_TIME: {\n          actions: [\"setTime\"]\n        },\n        SET_NOTIFICATION_TIMES: {\n          internal: false,\n          actions: [\"setNotifications\"]\n        }\n      }\n    },\n    running: {\n      invoke: [\n        { src: \"timer\", id: \"timer\" },\n        { src: \"plantNotifications\", id: \"plantNotifications\" }\n      ],\n      on: {\n        \"\": {\n          target: \"idle\",\n          cond: ({ currentTime }): boolean => currentTime <= 0\n        },\n        STOP: \"idle\",\n        COUNT_DOWN: {\n          actions: [\"countDown\"]\n        }\n      }\n    }\n  }\n};\n\nexport const machineOptions: Partial<MachineOptions<Context, Event>> = {\n  actions: {\n    setNotifications: assign<Context, Event>({\n      notificationTimes: (context, event) => {\n        if (event.type === \"SET_NOTIFICATION_TIMES\") {\n          return event.payload.notificationTimes;\n        }\n        return context.notificationTimes;\n      }\n    }),\n    setTime: assign<Context, Event>({\n      initialTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.initialTime,\n      currentTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.currentTime\n    }),\n    countDown: assign<Context, Event>({\n      currentTime: context => context.currentTime - secsToMS(1)\n    }),\n    reset: assign<Context, Event>({\n      currentTime: context => context.initialTime\n    })\n  },\n  services: {\n    timer: () => (cb): (() => void) => {\n      const interval = setInterval(() => {\n        cb(\"COUNT_DOWN\");\n      }, secsToMS(1));\n      return (): void => {\n        clearInterval(interval);\n      };\n    }\n  }\n};\n\nexport default Machine(machineConfig, machineOptions);\n","import * as React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport Machine from \"./machine\";\nimport { styled, ThemeSwitch } from \"./theme\";\nimport { secsToMS, formatTime, speakableTime } from \"./utils\";\n\nconst Container = styled.div`\n  background-color: ${({ theme }): string => theme.background};\n  color: ${({ theme }): string => theme.body};\n  min-height: 100vh;\n  -webkit-overflow-scrolling: touch; /* Lets it scroll lazy */\n  width: 100vw;\n  max-width: 414px;\n  margin: 0 auto;\n\n  &:after {\n    width: 100vw;\n    height: 100vh;\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: ${({ theme }): string => theme.body};\n    filter: brightness(0.75);\n    z-index: -1;\n  }\n`;\n\nconst Header = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  h2 {\n    width: 100%;\n  }\n`;\n\nconst Checkbox = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  input {\n    transform: scale(2);\n  }\n`;\n\nconst TextInput = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  label {\n    position: absolute;\n    top: -0.8rem;\n    left: 1rem;\n    background-color: ${({ theme }): string => theme.background};\n    padding: 2px;\n  }\n\n  input {\n    width: 100%;\n    background-color: ${({ theme }): string => theme.background};\n    color: ${({ theme }): string => theme.body};\n    padding: 0.5rem;\n    font-size: 1.5rem;\n    border: 2px solid ${({ theme }): string => theme.primary};\n  }\n`;\n\nconst Button = styled.button`\n  background-color: ${({ theme }): string => theme.primary};\n  color: ${({ theme }): string => theme.primaryAlt};\n  border: none;\n  padding: 0.5rem 1rem;\n  font-family: inherit;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 414px;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:hover,\n  &:focus {\n    filter: brightness(0.75);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    filter: brightness(1);\n    cursor: default;\n  }\n`;\n\nconst Time = styled.h2`\n  font-size: 5rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 1rem;\n  justify-content: space-between;\n`;\n\nconst NotificationConfig = styled.div`\n  background-color: ${({ theme }): string => theme.background};\n  color: ${({ theme }): string => theme.body};\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.25);\n  border-radius: 6px;\n  padding: 1.5rem;\n  width: 100%;\n  max-width: 414px;\n  margin-bottom: 1rem;\n  overflow: hidden;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  & > div {\n    label {\n      font-size: 1rem;\n    }\n  }\n`;\n\nconst App: React.FC<{}> = () => {\n  const [current, send] = useMachine(Machine, {\n    services: {\n      plantNotifications: context => (): (() => void) => {\n        const startedAt = new Date().getTime();\n        const getTime = (): number => {\n          const now = new Date().getTime();\n          // HACK not sure why but without the - 1000 the announcement occurs at\n          // the right time but announces a second less than the desired time\n          return context.initialTime - (now - startedAt - 1000);\n        };\n\n        const timeouts = context.notificationTimes.map(config => {\n          const timingFn = config.interval ? setInterval : setTimeout;\n          const id = timingFn(() => {\n            const speakable = new SpeechSynthesisUtterance(\n              config.message || speakableTime(getTime())\n            );\n            window.speechSynthesis.speak(speakable);\n          }, secsToMS(config.time));\n          return { ...config, id };\n        });\n\n        return (): void => {\n          timeouts.forEach(config => {\n            const clearTimingFn = config.interval\n              ? clearInterval\n              : clearTimeout;\n            clearTimingFn(config.id);\n          });\n        };\n      }\n    }\n  });\n\n  const changeNotifications = (i: number) => (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const draft = [...current.context.notificationTimes];\n    switch (e.target.type) {\n      case \"checkbox\": {\n        draft[i].interval = e.target.checked;\n        break;\n      }\n      case \"number\": {\n        draft[i].time = Number(e.target.value);\n        break;\n      }\n      case \"text\": {\n        draft[i].message = e.target.value;\n        break;\n      }\n    }\n    send({\n      type: \"SET_NOTIFICATION_TIMES\",\n      payload: { notificationTimes: draft }\n    });\n  };\n\n  const addNotification = (): void => {\n    const draft = [...current.context.notificationTimes];\n    draft.push({ time: 0, interval: false });\n    send({\n      type: \"SET_NOTIFICATION_TIMES\",\n      payload: { notificationTimes: draft }\n    });\n  };\n  const fresh = current.context.initialTime === current.context.currentTime;\n\n  return (\n    <Container>\n      <Header>\n        <h1>Workout Timer</h1>\n        <ThemeSwitch />\n        <Time>{formatTime(current.context.currentTime)}</Time>\n      </Header>\n\n      <Actions>\n        <Button\n          disabled={current.matches(\"running\")}\n          onClick={(): void => {\n            send(\"START\");\n          }}\n        >\n          Start\n        </Button>\n        <Button\n          disabled={!current.matches(\"running\")}\n          onClick={(): void => {\n            send(\"STOP\");\n          }}\n        >\n          Stop\n        </Button>\n\n        <Button\n          disabled={fresh || current.matches(\"running\")}\n          onClick={(): void => {\n            send(\"RESET\");\n          }}\n        >\n          Reset\n        </Button>\n        <Button\n          onClick={addNotification}\n          disabled={!fresh || current.matches(\"running\")}\n        >\n          Add Notification\n        </Button>\n        {current.context.notificationTimes.map((config, i) => (\n          <NotificationConfig key={`${i}`}>\n            <TextInput>\n              <label htmlFor={`seconds:${i}`}>Seconds</label>\n              <input\n                disabled={current.matches(\"running\")}\n                type=\"number\"\n                value={config.time}\n                onChange={changeNotifications(i)}\n              />\n            </TextInput>\n\n            <TextInput>\n              <label htmlFor={`message:${i}`}>Message</label>\n              <input\n                disabled={current.matches(\"running\")}\n                placeholder=\"Woohoo!\"\n                id={`interval:${i}`}\n                type=\"text\"\n                value={config.message || \"\"}\n                onChange={changeNotifications(i)}\n              />\n            </TextInput>\n\n            <Checkbox>\n              <label htmlFor={`interval:${i}`}>Interval:</label>\n              <input\n                disabled={current.matches(\"running\")}\n                id={`interval:${i}`}\n                type=\"checkbox\"\n                checked={config.interval}\n                onChange={changeNotifications(i)}\n              />\n            </Checkbox>\n          </NotificationConfig>\n        ))}\n      </Actions>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { ThemeProvider } from \"./theme\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}