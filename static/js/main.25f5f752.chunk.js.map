{"version":3,"sources":["icons.tsx","theme.tsx","atoms/Button/index.tsx","utils/index.ts","types/index.ts","machine/announcement.ts","machine/index.ts","contexts/machine.tsx","atoms/NumberInput/index.tsx","molecules/AnnouncementConfig/index.tsx","atoms/TextInput/index.tsx","organisms/Actions/index.tsx","organisms/Header/index.tsx","serviceWorker.ts","App.tsx","index.tsx"],"names":["Day","xmlns","width","height","d","Night","colors","injectGlobal","commonTheme","error","success","themeLight","background","body","primary","primaryAlt","secondary","secondaryAlt","themeDark","defaultThemeContext","mode","window","matchMedia","matches","setTheme","ThemeContext","React","ThemeProvider","children","state","hasMounted","setThemeState","lsMode","localStorage","getItem","useEffectDarkMode","themeState","theme","Provider","value","light","dark","setItem","styled","Button","button","ThemeSwitch","onClick","Container","type","props","secsToMS","R","minsToMS","MILLISECONDS_IN_SECOND","hoursToMS","msToSecs","msToMinutes","msToHours","padStart","maxLength","char","s","toHoursMinutesSeconds","Math","floor","LocalStorageKeys","fromHoursMinutesSeconds","fn","t","speakableTime","label","time","Boolean","concat","String","createUUID","dt","Date","getTime","replace","c","r","random","toString","AnnouncementMachine","Machine","id","initial","context","message","states","speaking","invoke","src","cb","speakable","SpeechSynthesisUtterance","Object","assign","onend","text","speechSynthesis","speak","cancel","on","SPOKEN","done","defaultTime","Number","DEFAULT_TIME","machineConfig","initialTime","currentTime","announcementTimes","announcementActor","startedAt","idle","START","RESET","actions","SET_TIME","SET_ANNOUNCEMENT_TIMES","internal","running","entry","target","cond","STOP","COUNT_DOWN","complete","after","500","machineOptions","storeTime","setAnnouncements","event","payload","setTime","countDown","filter","announcement","timeDiff","interval","slice","map","spawn","withContext","reset","announceStart","announceEnd","services","noSleep","plantAnnouncements","timer","setInterval","clearInterval","AppMachineContext","createContext","AppMachineProvider","config","machine","useMachine","appMachine","_","useAppMachine","useContext","Error","Consumer","select","NumberInput","range","display","start","stop","Array","fill","i","key","div","Checkbox","TextInput","AnnouncementConfig","current","send","changeNotifications","e","draft","findIndex","checked","data-testid","htmlFor","disabled","onChange","placeholder","Input","ConfigOptions","ul","ShowMore","SaveConfig","Actions","configName","setConfigName","showSaveConfig","setShowSaveConfig","showLoadConfig","setShowLoadConfig","showMore","setShowMore","fresh","savedConfigs","JSON","parse","role","b","push","length","configs","announcements","stringify","keys","entries","Time","Header","hms","hours","minutes","seconds","n","console","log","isLocalhost","location","hostname","match","register","navigator","URL","process","href","origin","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","Announcements","Refresh","Version","p","App","updateAvailable","setUpdateAvailable","waitingWorker","setWaitingWorker","onSWUpdate","waiting","postMessage","hidden","version","rootElement","document","getElementById","NoSleep","render","enable","disable"],"mappings":"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","file":"static/js/main.25f5f752.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Day: React.FC<{}> = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\">\n    <path d=\"M12 7a5 5 0 110 10 5 5 0 010-10m0 2a3 3 0 100 6 3 3 0 000-6m0-7l2 3a7 7 0 00-4 0l2-3M3 7h5a7 7 0 00-3 4L3 7m0 10l2-4a7 7 0 003 4H3M21 7l-2 4a7 7 0 00-2-4h4m0 10h-4a7 7 0 002-4l2 4m-9 5l-2-3h4l-2 3z\" />\n  </svg>\n);\n\nexport const Night: React.FC<{}> = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\">\n    <path d=\"M18 4l-3 2 1 3-2-2-3 2 1-3-3-2h3l2-3 1 3h3m3 7l-1 1v2l-1-1-2 1v-2l-1-1h2l1-2v2h2m-2 5c1 0 2 1 1 2l-1 1c-4 4-10 4-14 0A10 10 0 016 4c1-1 2 0 2 1a10 10 0 0011 11m-2 2c-2 0-5-1-7-3-3-3-4-5-4-8a8 8 0 0011 11z\" />\n  </svg>\n);\n","import * as React from \"react\";\nimport emotionStyled, { CreateStyled } from \"@emotion/styled/macro\";\nimport { injectGlobal } from \"emotion\";\nimport { ThemeProvider as EmotionProvider } from \"emotion-theming\";\n\nimport { Day, Night } from \"./icons\";\n\nconst colors = {\n  white: \"#FBFEF9\",\n  gray: \"#F3EFF5\",\n  black: \"#1C2826\",\n  red: \"#ef3054\",\n  green: \"#43AA8B\",\n  cerullean: \"#3454D1\",\n  lightBlue: \"#715AFF\",\n  darkBlue: \"#0E0E52\",\n  salmon: \"#F49390\",\n};\n\ninjectGlobal`\n  html, body {\n    padding: 0;\n    margin: 0;\n    font-family: 'Inconsolata', sans-serif;\n    overflow-x: hidden;\n    background-color: #000;\n  }\n\n  * {\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    transition: background-color 300ms;\n  }\n`;\n\ninterface CommonTheme {\n  error: string;\n  success: string;\n}\n\nexport type Theme = CommonTheme & {\n  background: string;\n  body: string;\n  primary: string;\n  primaryAlt: string;\n  secondary: string;\n  secondaryAlt: string;\n};\n\nconst commonTheme: CommonTheme = {\n  error: colors.red,\n  success: colors.green,\n};\n\nconst themeLight: Theme = {\n  ...commonTheme,\n  background: colors.gray,\n  body: colors.black,\n  primary: colors.salmon,\n  primaryAlt: colors.white,\n  secondary: colors.lightBlue,\n  secondaryAlt: colors.white,\n};\n\nconst themeDark: Theme = {\n  ...commonTheme,\n  background: colors.black,\n  body: colors.white,\n  primary: colors.cerullean,\n  primaryAlt: colors.white,\n  secondary: colors.salmon,\n  secondaryAlt: colors.white,\n};\n\nconst theme = (mode: ThemeContext[\"mode\"]): Theme =>\n  mode === \"dark\" ? themeDark : themeLight;\n\ninterface ThemeContext {\n  mode: \"dark\" | \"light\";\n  setTheme: (mode?: ThemeContext[\"mode\"]) => void;\n}\n\nconst defaultThemeContext: ThemeContext = {\n  mode:\n    window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      ? \"dark\"\n      : \"light\",\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setTheme: () => {},\n};\n\nconst ThemeContext = React.createContext(defaultThemeContext);\nexport const useTheme = (): ThemeContext => React.useContext(ThemeContext);\n\ntype UseEffectDarkMode = Pick<ThemeContext, \"mode\"> & { hasMounted: boolean };\nconst useEffectDarkMode = (): [\n  UseEffectDarkMode,\n  React.Dispatch<React.SetStateAction<UseEffectDarkMode>>\n] => {\n  const state = React.useState<UseEffectDarkMode>({\n    mode: defaultThemeContext.mode,\n    hasMounted: false,\n  });\n  const [, setThemeState] = state;\n\n  React.useEffect(() => {\n    const lsMode = (localStorage.getItem(\"mode\") ||\n      \"dark\") as ThemeContext[\"mode\"];\n    setThemeState((state) => ({ ...state, mode: lsMode, hasMounted: true }));\n  }, [setThemeState]);\n\n  return state;\n};\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n  const [themeState, setThemeState] = useEffectDarkMode();\n  if (!themeState.hasMounted) {\n    return <div />;\n  }\n\n  const setTheme = (mode?: ThemeContext[\"mode\"]): void => {\n    const nextThemes = {\n      light: \"dark\",\n      dark: \"light\",\n    };\n    if (!mode) {\n      mode = nextThemes[themeState.mode] as ThemeContext[\"mode\"];\n    }\n    localStorage.setItem(\"mode\", mode);\n    setThemeState((state) => ({ ...state, mode } as UseEffectDarkMode));\n  };\n\n  return (\n    <EmotionProvider theme={theme(themeState.mode)}>\n      <ThemeContext.Provider\n        value={{\n          mode: themeState.mode,\n          setTheme,\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    </EmotionProvider>\n  );\n};\n\nexport const styled = emotionStyled as CreateStyled<Theme>;\n\nconst Button = styled.button`\n  background-color: transparent;\n  border: none;\n  svg {\n    fill: ${({ theme }): string => theme.body};\n  }\n`;\n\nexport const ThemeSwitch: React.FC = () => {\n  const { mode, setTheme } = React.useContext(ThemeContext);\n  return (\n    <Button\n      onClick={(): void => {\n        setTheme();\n      }}\n    >\n      {mode === \"light\" ? <Day /> : <Night />}\n    </Button>\n  );\n};\n","import * as React from \"react\";\nimport { styled } from \"theme\";\n\nconst Container = styled.button`\n  background-color: ${({ theme }): string => theme.primary};\n  color: ${({ theme }): string => theme.primaryAlt};\n  border: none;\n  padding: 0.5rem 1rem;\n  font-family: inherit;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 414px;\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:hover,\n  &:focus {\n    filter: brightness(0.75);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    filter: brightness(1);\n    cursor: default;\n  }\n`;\n\nconst Button: React.FC<React.HTMLProps<HTMLButtonElement>> = ({\n  type: _,\n  ...props\n}) => {\n  return <Container {...props} />;\n};\n\nexport default Button;\n","import * as R from \"ramda\";\nimport * as React from \"react\";\n\nconst MILLISECONDS_IN_SECOND = 1000;\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;\nconst MILLISECONDS_IN_HOUR =\n  MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE * MINUTES_IN_HOUR;\n\nexport const secsToMS = R.multiply(MILLISECONDS_IN_SECOND);\nexport const minsToMS = R.multiply(MILLISECONDS_IN_MINUTE);\nexport const hoursToMS = R.multiply(MILLISECONDS_IN_HOUR);\nexport const msToSecs = R.divide(R.__, MILLISECONDS_IN_SECOND);\nexport const msToMinutes = R.divide(R.__, MILLISECONDS_IN_MINUTE);\nexport const msToHours = R.divide(R.__, MILLISECONDS_IN_HOUR);\n\nexport const padStart = R.curry(\n  (maxLength: number, char: string, s: string) => {\n    return s.padStart(maxLength, char);\n  }\n);\n\nexport const toHoursMinutesSeconds = R.juxt([\n  R.pipe(msToHours, R.modulo(R.__, HOURS_IN_DAY), Math.floor),\n  R.pipe(msToMinutes, R.modulo(R.__, MINUTES_IN_HOUR), Math.floor),\n  R.pipe(msToSecs, R.modulo(R.__, SECONDS_IN_MINUTE), Math.floor),\n]);\n\nfunction call<T, U>(fn: (t: T) => U, t: T): U {\n  return fn(t);\n}\n\nexport const fromHoursMinutesSeconds = R.pipe(\n  R.zipWith<(n: number) => number, number, number>(call, [\n    hoursToMS,\n    minsToMS,\n    secsToMS,\n  ]),\n  R.sum\n);\n\nexport const speakableTime = R.pipe(\n  toHoursMinutesSeconds,\n  R.zip([\"hour\", \"minute\", \"second\"]),\n  R.map(\n    R.ifElse(\n      R.pipe(R.last, R.gt(R.__, 0)),\n      ([label, time]) => `${time} ${label}${time === 1 ? \"\" : \"s\"}`,\n      R.always(\"\")\n    )\n  ),\n  R.filter(Boolean),\n  R.join(\". \"),\n  (s) => s.concat(\".\")\n);\n\nexport const formatTime = R.pipe(\n  toHoursMinutesSeconds,\n  R.map(R.pipe(String, padStart(2, \"0\"))),\n  R.join(\":\")\n);\n\nexport function createUUID(): string {\n  let dt = new Date().getTime();\n  const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\n    /[xy]/g,\n    function (c) {\n      const r = (dt + Math.random() * 16) % 16 | 0;\n      dt = Math.floor(dt / 16);\n      return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n    }\n  );\n  return uuid;\n}\n\nexport function etv(\n  fn: (s: string) => void\n): (e: React.ChangeEvent<HTMLInputElement>) => void {\n  return (e: React.ChangeEvent<HTMLInputElement>): void => {\n    return fn(e.target.value);\n  };\n}\n","import { Actor } from \"xstate\";\n\nexport type IAnnouncementConfig = {\n  id: string;\n  time: number;\n  interval: boolean;\n  message?: string;\n};\n\n/* eslint-disable @typescript-eslint/ban-types */\nexport type AppMachineSchema = {\n  states: {\n    idle: {};\n    running: {};\n    complete: {};\n  };\n};\n/* eslint-enable @typescript-eslint/ban-types */\n\nexport type StartEvent = {\n  type: \"START\";\n};\n\nexport type SetTimeEvent = {\n  type: \"SET_TIME\";\n  payload: { time: number };\n};\n\nexport type SetAnnouncementTimesEvent = {\n  type: \"SET_ANNOUNCEMENT_TIMES\";\n  payload: { announcementTimes: IAnnouncementConfig[] };\n};\n\nexport type AnnounceEvent = {\n  type: \"ANNOUNCE\";\n  payload: { message: string };\n};\n\nexport type AppMachineEvent =\n  | AnnounceEvent\n  | StartEvent\n  | SetTimeEvent\n  | SetAnnouncementTimesEvent\n  | { type: \"STOP\" }\n  | { type: \"COUNT_DOWN\" }\n  | { type: \"RESET\" };\n\nexport type AppMachineContext = {\n  initialTime: number;\n  currentTime: number;\n  announcementTimes: IAnnouncementConfig[];\n  announcementActor: Actor | null;\n  startedAt: number;\n};\n\nexport enum LocalStorageKeys {\n  DEFAULT_TIME = \"defaultTime\",\n}\n","import { Machine } from \"xstate\";\n\nconst AnnouncementMachine = Machine({\n  id: \"AnnouncementMachine\",\n  initial: \"speaking\",\n  context: {\n    message: \"\",\n  },\n  states: {\n    speaking: {\n      invoke: {\n        id: \"announcer\",\n        src: (context) => (cb): (() => void) => {\n          const speakable = new SpeechSynthesisUtterance();\n          Object.assign(speakable, {\n            onend: () => {\n              cb(\"SPOKEN\");\n            },\n            text: context.message,\n          } as Partial<SpeechSynthesisUtterance>);\n          window.speechSynthesis.speak(speakable);\n          return (): void => {\n            window.speechSynthesis.cancel();\n          };\n        },\n      },\n      on: {\n        SPOKEN: \"done\",\n      },\n    },\n    done: {\n      type: \"final\",\n    },\n  },\n});\n\nexport type AnnouncementMachine = typeof AnnouncementMachine;\n\nexport default AnnouncementMachine;\n","import {\n  MachineConfig,\n  MachineOptions,\n  assign,\n  Machine,\n  InvokeCallback,\n  spawn,\n} from \"xstate\";\nimport { minsToMS, secsToMS, speakableTime } from \"utils\";\nimport {\n  AppMachineEvent as Event,\n  AppMachineSchema as Schema,\n  AppMachineContext as Context,\n  LocalStorageKeys,\n} from \"types\";\nimport AnnouncementMachine from \"./announcement\";\n\nconst defaultTime = Number(\n  localStorage.getItem(LocalStorageKeys.DEFAULT_TIME) || minsToMS(6)\n);\n\nexport const machineConfig: MachineConfig<Context, Schema, Event> = {\n  initial: \"idle\",\n  id: \"main\",\n  context: {\n    initialTime: defaultTime,\n    currentTime: defaultTime,\n    announcementTimes: [],\n    announcementActor: null,\n    startedAt: 0,\n  },\n  states: {\n    idle: {\n      on: {\n        START: \"running\",\n        RESET: {\n          actions: [\"reset\"],\n        },\n        SET_TIME: {\n          actions: [\"setTime\", \"storeTime\"],\n        },\n        SET_ANNOUNCEMENT_TIMES: {\n          internal: false,\n          actions: [\"setAnnouncements\"],\n        },\n      },\n    },\n    running: {\n      entry: [\"announceStart\"],\n      invoke: [\n        { src: \"timer\", id: \"timer\" },\n        { src: \"noSleep\", id: \"noSleep\" },\n      ],\n      on: {\n        \"\": {\n          target: \"complete\",\n          cond: ({ currentTime }): boolean => currentTime <= 0,\n        },\n        STOP: \"idle\",\n        COUNT_DOWN: {\n          actions: [\"countDown\"],\n        },\n      },\n    },\n    complete: {\n      entry: [\"announceEnd\"],\n      after: {\n        500: \"idle\",\n      },\n    },\n  },\n};\n\nexport const machineOptions: Partial<MachineOptions<Context, Event>> = {\n  actions: {\n    storeTime: (): void => {\n      // define \"storeTime\" in AppMachineProvider\n    },\n\n    setAnnouncements: assign<Context, Event>({\n      announcementTimes: (context, event) => {\n        if (event.type === \"SET_ANNOUNCEMENT_TIMES\") {\n          return event.payload.announcementTimes;\n        }\n        return context.announcementTimes;\n      },\n    }),\n\n    setTime: assign<Context, Event>({\n      initialTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.initialTime,\n      currentTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.currentTime,\n    }),\n\n    countDown: assign<Context, Event>({\n      currentTime: (context) => context.currentTime - secsToMS(1),\n      announcementActor: (context) =>\n        context.announcementTimes\n          .filter((announcement) => {\n            // plus a second so the announcement happens right at the time shift\n            const timeDiff = context.initialTime - context.currentTime + 1000;\n            return context.initialTime > context.currentTime &&\n              announcement.interval\n              ? timeDiff % secsToMS(announcement.time) === 0\n              : timeDiff === secsToMS(announcement.time);\n          })\n          .slice(0, 1)\n          .map((announcement) => {\n            return spawn(\n              AnnouncementMachine.withContext({\n                message:\n                  announcement.message ||\n                  speakableTime(context.currentTime - 1000),\n              }),\n              announcement.id\n            );\n          })[0] || null,\n    }),\n\n    reset: assign<Context, Event>({\n      currentTime: (context) => context.initialTime,\n    }),\n\n    announceStart: assign<Context, Event>({\n      announcementActor: (context) =>\n        context.currentTime === context.initialTime\n          ? spawn(\n              AnnouncementMachine.withContext({ message: \"Let's go\" }),\n              \"letsgo\"\n            )\n          : null,\n    }),\n\n    announceEnd: assign<Context, Event>({\n      announcementActor: () =>\n        spawn(\n          AnnouncementMachine.withContext({ message: \"Time. Great job!\" }),\n          \"end\"\n        ),\n    }),\n  },\n  services: {\n    noSleep: () => (): (() => void) => {\n      return (): void => {\n        // define \"noSleep\" in AppMachineProvider\n      };\n    },\n    plantAnnouncements: () => (): void => {\n      // define \"plantAnnouncements\" in AppMachineProvider\n    },\n    timer: () => (cb: Parameters<InvokeCallback>[0]): (() => void) => {\n      const interval = setInterval(() => {\n        cb(\"COUNT_DOWN\");\n      }, secsToMS(1));\n      return (): void => {\n        clearInterval(interval);\n      };\n    },\n  },\n};\n\nexport default Machine(machineConfig, machineOptions);\n","import React from \"react\";\nimport { State, Interpreter } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\nimport appMachine from \"machine\";\nimport {\n  AppMachineEvent,\n  AppMachineSchema,\n  AppMachineContext as AppMachineExtendedState,\n  LocalStorageKeys,\n} from \"types\";\n\ntype UseableMachine = [\n  State<AppMachineExtendedState, AppMachineEvent>,\n  Interpreter<\n    AppMachineExtendedState,\n    AppMachineSchema,\n    AppMachineEvent\n  >[\"send\"],\n  Interpreter<AppMachineExtendedState, AppMachineSchema, AppMachineEvent>\n];\n\ntype AppContextState = UseableMachine;\n\nexport const AppMachineContext = React.createContext<AppContextState | null>(\n  null\n);\n\nexport const AppMachineProvider: React.FC<{\n  config?: Parameters<typeof useMachine>[1];\n}> = ({ children, config }) => {\n  const machine = useMachine<AppMachineExtendedState, AppMachineEvent>(\n    appMachine,\n    {\n      actions: {\n        storeTime: (_, event): void => {\n          if (event.type === \"SET_TIME\") {\n            localStorage.setItem(\n              LocalStorageKeys.DEFAULT_TIME,\n              String(event.payload.time)\n            );\n          }\n        },\n      },\n      services: {\n        ...config?.services,\n      },\n    }\n  );\n\n  return (\n    <AppMachineContext.Provider value={machine}>\n      {children}\n    </AppMachineContext.Provider>\n  );\n};\n\nexport const useAppMachine = (): UseableMachine => {\n  const machine = React.useContext(AppMachineContext);\n  if (!machine) {\n    throw new Error(\"Must be wrapped by AppMachineProvider\");\n  }\n  return machine;\n};\n\nexport const AppMachineConsumer = AppMachineContext.Consumer;\n","import * as React from \"react\";\nimport { styled } from \"theme\";\n\nconst Container = styled.select`\n  border: none;\n  background: transparent;\n  color: ${({ theme }): string => theme.body};\n  /* Chrome, Safari, Edge, Opera */\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  -webkit-appearance: none;\n\n  /* Firefox */\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst NumberInput: React.FC<\n  React.HTMLProps<HTMLSelectElement> & {\n    range?: [number, number];\n    display?: (n: number) => string;\n  }\n> = ({ range = [1, 10], display = String, ...props }) => {\n  const [start, stop] = range;\n  return (\n    <Container type=\"number\" {...props}>\n      {Array(stop - start + 1)\n        .fill(null)\n        .map((_, i) => (\n          <option value={i + start} key={i + start}>\n            {display(i + start)}\n          </option>\n        ))}\n    </Container>\n  );\n};\n\nexport default NumberInput;\n","import * as React from \"react\";\nimport { styled } from \"theme\";\nimport { IAnnouncementConfig } from \"types\";\nimport { useAppMachine } from \"contexts/machine\";\nimport NumberInput from \"atoms/NumberInput\";\n\nconst Container = styled.div`\n  background-color: ${({ theme }): string => theme.background};\n  color: ${({ theme }): string => theme.body};\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.25);\n  padding: 1.5rem;\n  width: 100%;\n  max-width: 414px;\n  margin-bottom: 1rem;\n  overflow: hidden;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  & > div {\n    label {\n      font-size: 1rem;\n    }\n  }\n`;\n\nconst Checkbox = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  input {\n    transform: scale(2);\n  }\n`;\n\nconst TextInput = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  label {\n    position: absolute;\n    top: -0.625rem;\n    left: 1rem;\n    background-color: ${({ theme }): string => theme.background};\n    padding: 0 0.25rem;\n  }\n\n  input,\n  select {\n    width: 100%;\n    background-color: ${({ theme }): string => theme.background};\n    color: ${({ theme }): string => theme.body};\n    padding: 0.5rem;\n    font-size: 1.5rem;\n    border: 2px solid ${({ theme }): string => theme.primary};\n  }\n`;\n\ninterface Props {\n  config: IAnnouncementConfig;\n}\n\nconst AnnouncementConfig: React.FC<Props> = ({ config }) => {\n  const machine = useAppMachine();\n  const [current, send] = machine;\n\n  const changeNotifications = (id: string) => (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const draft = [...current.context.announcementTimes];\n    const i = draft.findIndex((config) => id === config.id);\n    if (i != null) {\n      switch (e.target.type as \"checkbox\" | \"number\" | \"text\") {\n        case \"checkbox\": {\n          draft[i].interval = e.target.checked;\n          break;\n        }\n        case \"text\": {\n          draft[i].message = e.target.value;\n          break;\n        }\n      }\n      send({\n        type: \"SET_ANNOUNCEMENT_TIMES\",\n        payload: { announcementTimes: draft },\n      });\n    }\n  };\n\n  const selectNumber = (id: string) => (\n    e: React.ChangeEvent<HTMLSelectElement>\n  ): void => {\n    const draft = [...current.context.announcementTimes];\n    const i = draft.findIndex((config) => id === config.id);\n    draft[i].time = Number(e.target.value);\n    send({\n      type: \"SET_ANNOUNCEMENT_TIMES\",\n      payload: { announcementTimes: draft },\n    });\n  };\n\n  return (\n    <Container data-testid=\"AnnouncementConfig\">\n      <TextInput>\n        <label htmlFor={`seconds:${config.id}`}>Seconds</label>\n        <NumberInput\n          data-testid=\"AnnouncementConfig__time\"\n          disabled={current.matches(\"running\")}\n          value={config.time}\n          onChange={selectNumber(config.id)}\n          range={[1, 600]}\n        />\n      </TextInput>\n\n      <TextInput>\n        <label htmlFor={`message:${config.id}`}>Message</label>\n        <input\n          data-testid=\"AnnouncementConfig__message\"\n          disabled={current.matches(\"running\")}\n          placeholder=\"Woohoo!\"\n          id={`interval:${config.id}`}\n          type=\"text\"\n          value={config.message || \"\"}\n          onChange={changeNotifications(config.id)}\n        />\n      </TextInput>\n\n      <Checkbox>\n        <label htmlFor={`interval:${config.id}`}>Interval:</label>\n        <input\n          data-testid=\"AnnouncementConfig__interval\"\n          disabled={current.matches(\"running\")}\n          id={`interval:${config.id}`}\n          type=\"checkbox\"\n          checked={Boolean(config.interval)}\n          onChange={changeNotifications(config.id)}\n        />\n      </Checkbox>\n    </Container>\n  );\n};\n\nexport default AnnouncementConfig;\n","import * as React from \"react\";\nimport { styled } from \"theme\";\n\nconst Input = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  label {\n    position: absolute;\n    top: -0.625rem;\n    left: 1rem;\n    background-color: ${({ theme }): string => theme.background};\n    padding: 0 0.25rem;\n  }\n\n  input {\n    width: 100%;\n    background-color: ${({ theme }): string => theme.background};\n    color: ${({ theme }): string => theme.body};\n    padding: 0.5rem;\n    font-size: 1.5rem;\n    border: 2px solid ${({ theme }): string => theme.primary};\n  }\n`;\n\nconst TextInput: React.FC<React.HTMLProps<HTMLInputElement>> = (props) => {\n  return (\n    <Input>\n      <input {...props} />\n    </Input>\n  );\n};\n\nexport default TextInput;\n","import * as React from \"react\";\n\nimport Button from \"atoms/Button\";\nimport TextInput from \"atoms/TextInput\";\nimport { useAppMachine } from \"contexts/machine\";\nimport { styled } from \"theme\";\nimport { IAnnouncementConfig } from \"types\";\nimport { createUUID, etv } from \"utils\";\n\nconst LOCAL_STORAGE_KEY = \"@timerConfigs\";\ntype SavedConfig = {\n  time: number;\n  announcements: IAnnouncementConfig[];\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 1rem;\n  justify-content: space-between;\n`;\n\nconst ConfigOptions = styled.ul`\n  list-style: none;\n  padding: 0;\n  width: 100%;\n  margin-top: 0;\n\n  li {\n    text-align: center;\n    font-size: 1.5rem;\n    text-decoration: underline;\n    cursor: pointer;\n    margin-bottom: 1rem;\n\n    &:last-of-type {\n      margin-bottom: 0;\n    }\n  }\n`;\n\nconst ShowMore = styled.div`\n  font-size: 1rem;\n  color: ${({ theme }) => theme.body};\n  text-decoration: underline;\n  cursor: pointer;\n  margin: 1rem auto;\n`;\n\nconst SaveConfig = styled.div`\n  > button {\n    width: calc(50% - 0.5rem);\n    margin-right: 1rem;\n    margin-top: 1rem;\n    background-color: ${({ theme }) => theme.success};\n\n    &:last-of-type {\n      margin-right: 0rem;\n      background-color: ${({ theme }) => theme.primaryAlt};\n      color: ${({ theme }) => theme.background};\n    }\n  }\n`;\n\nconst Actions: React.FC = () => {\n  const [current, send] = useAppMachine();\n  const [configName, setConfigName] = React.useState(\"\");\n  const [showSaveConfig, setShowSaveConfig] = React.useState(false);\n  const [showLoadConfig, setShowLoadConfig] = React.useState(false);\n  const [showMore, setShowMore] = React.useState(false);\n\n  const addAnnouncement = (): void => {\n    const draft = [...current.context.announcementTimes];\n    draft.push({ time: 0, interval: false, id: createUUID() });\n    send({\n      type: \"SET_ANNOUNCEMENT_TIMES\",\n      payload: { announcementTimes: draft },\n    });\n  };\n  const fresh = current.context.initialTime === current.context.currentTime;\n\n  const saveAnnouncements = (): void => {\n    const configs = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY) || \"{}\");\n    const config = {\n      ...configs,\n      [configName]: {\n        announcements: current.context.announcementTimes,\n        time: current.context.initialTime,\n      },\n    } as Record<string, SavedConfig>;\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(config));\n    setShowSaveConfig(false);\n  };\n\n  const savedConfigs: Record<string, SavedConfig> = JSON.parse(\n    localStorage.getItem(LOCAL_STORAGE_KEY) || \"{}\"\n  );\n\n  return (\n    <Container>\n      <Button\n        disabled={current.matches(\"running\")}\n        onClick={() => send(\"START\")}\n      >\n        {fresh ? \"Start\" : \"Resume\"}\n      </Button>\n      <Button\n        disabled={!current.matches(\"running\")}\n        onClick={() => send(\"STOP\")}\n      >\n        Pause\n      </Button>\n\n      <Button\n        disabled={fresh || current.matches(\"running\")}\n        onClick={() => send(\"RESET\")}\n      >\n        Reset\n      </Button>\n\n      <ShowMore\n        role=\"button\"\n        onClick={() => setShowMore((b) => !b)}\n        data-testid=\"show-more\"\n      >\n        {showMore ? \"Hide\" : \"More\"}\n      </ShowMore>\n\n      {showMore ? (\n        <div>\n          <Button\n            data-testid=\"add-announcement\"\n            onClick={addAnnouncement}\n            disabled={!fresh || current.matches(\"running\")}\n          >\n            Add announcement\n          </Button>\n\n          <Button\n            onClick={() => setShowSaveConfig(true)}\n            disabled={current.context.announcementTimes.length === 0}\n            data-testid=\"save-announcements\"\n          >\n            Save announcements\n          </Button>\n\n          {showSaveConfig ? (\n            <SaveConfig>\n              <TextInput value={configName} onChange={etv(setConfigName)} />\n              <Button onClick={saveAnnouncements} disabled={configName === \"\"}>\n                Save\n              </Button>\n              <Button onClick={() => setShowSaveConfig(false)}>Cancel</Button>\n            </SaveConfig>\n          ) : null}\n\n          <Button\n            data-testid=\"load-announcements\"\n            onClick={() => setShowLoadConfig((b) => !b)}\n            disabled={(() => {\n              try {\n                return Object.keys(savedConfigs).length === 0;\n              } catch (_) {\n                return true;\n              }\n            })()}\n          >\n            Load announcements\n          </Button>\n\n          {showLoadConfig ? (\n            <ConfigOptions>\n              {Object.entries(savedConfigs).map(\n                ([key, value]: [string, SavedConfig]) => (\n                  <li\n                    key={key}\n                    role=\"button\"\n                    onClick={() => {\n                      send({\n                        type: \"SET_ANNOUNCEMENT_TIMES\",\n                        payload: {\n                          announcementTimes: value.announcements,\n                        },\n                      });\n                      send({\n                        type: \"SET_TIME\",\n                        payload: {\n                          time: value.time,\n                        },\n                      });\n                      setShowLoadConfig(false);\n                      setConfigName(key);\n                    }}\n                  >\n                    {key}\n                  </li>\n                )\n              )}\n            </ConfigOptions>\n          ) : null}\n\n          <Button\n            onClick={() =>\n              send({\n                type: \"SET_ANNOUNCEMENT_TIMES\",\n                payload: {\n                  announcementTimes: [],\n                },\n              })\n            }\n            disabled={current.context.announcementTimes.length === 0}\n          >\n            Clear announcements\n          </Button>\n        </div>\n      ) : null}\n    </Container>\n  );\n};\n\nexport default Actions;\n","import * as React from \"react\";\nimport { styled, ThemeSwitch } from \"theme\";\nimport { toHoursMinutesSeconds, fromHoursMinutesSeconds } from \"utils\";\nimport { useAppMachine } from \"contexts/machine\";\nimport NumberInput from \"atoms/NumberInput\";\n\nconst Container = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Time = styled.div`\n  width: 100%;\n  font-size: 2rem;\n  select {\n    font-size: 4rem;\n  }\n  text-align: center;\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  & > input {\n    padding: 0;\n    max-width: 25%;\n  }\n`;\n\nconst Header: React.FC = () => {\n  const [current, send] = useAppMachine();\n\n  const hms = toHoursMinutesSeconds(current.context.currentTime);\n\n  const changeHours = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const hours = Number(e.target.value);\n    const time = fromHoursMinutesSeconds([hours, hms[1], hms[2]]);\n    send({ type: \"SET_TIME\", payload: { time } });\n  };\n\n  const changeMinutes = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const minutes = Number(e.target.value);\n    const time = fromHoursMinutesSeconds([hms[0], minutes, hms[2]]);\n    send({ type: \"SET_TIME\", payload: { time } });\n  };\n\n  const changeSeconds = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const seconds = Number(e.target.value);\n    const time = fromHoursMinutesSeconds([hms[0], hms[1], seconds]);\n    console.log(time);\n    send({ type: \"SET_TIME\", payload: { time } });\n  };\n\n  const [hours, minutes, seconds] = hms;\n\n  return (\n    <Container data-testid=\"Header\">\n      <h1>Workout Timer</h1>\n      <ThemeSwitch />\n      <Time>\n        <NumberInput\n          range={[0, 24]}\n          data-testid=\"Header__hours\"\n          onChange={changeHours}\n          value={hours}\n          display={(n: number): string => String(n).padStart(2, \"0\")}\n        />\n        <span>:</span>\n        <NumberInput\n          range={[0, 59]}\n          data-testid=\"Header__minutes\"\n          onChange={changeMinutes}\n          value={minutes}\n          display={(n: number): string => String(n).padStart(2, \"0\")}\n        />\n        <span>:</span>\n        <NumberInput\n          range={[0, 59]}\n          data-testid=\"Header__seconds\"\n          onChange={changeSeconds}\n          value={seconds}\n          display={(n: number): string => String(n).padStart(2, \"0\")}\n        />\n      </Time>\n    </Container>\n  );\n};\n\nexport default Header;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n// modified to run within React.useEffect, so window.load event handler not\n// needed\nexport function register(config?: Config): void {\n  // if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    const swUrl = `${process.env.PUBLIC_URL}/worker.js`;\n\n    if (isLocalhost) {\n      // This is running on localhost. Let's check if a service worker still exists or not.\n      checkValidServiceWorker(swUrl, config);\n\n      // Add some additional logging to localhost, pointing developers to the\n      // service worker/PWA documentation.\n      navigator.serviceWorker.ready.then(() => {\n        console.log(\n          \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n        );\n      });\n    } else {\n      // Is not localhost. Just register service worker\n      registerValidSW(swUrl, config);\n    }\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\n\nimport Button from \"atoms/Button\";\nimport { useAppMachine } from \"contexts/machine\";\nimport AnnouncementConfig from \"molecules/AnnouncementConfig\";\nimport Actions from \"organisms/Actions\";\nimport Header from \"organisms/Header\";\n\nimport { version } from \"../package.json\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport { styled } from \"./theme\";\n\nconst Container = styled.div`\n  background-color: ${({ theme }): string => theme.background};\n  color: ${({ theme }): string => theme.body};\n  min-height: 100vh;\n  -webkit-overflow-scrolling: touch; /* Lets it scroll lazy */\n  width: 100vw;\n  max-width: 414px;\n  margin: 0 auto;\n  padding-bottom: 1rem;\n\n  &:after {\n    width: 100vw;\n    height: 100vh;\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: ${({ theme }): string => theme.body};\n    filter: brightness(0.75);\n    z-index: -1;\n  }\n`;\n\nconst Announcements = styled.div`\n  padding: 0 1rem;\n`;\n\nconst Refresh = styled(Button)`\n  position: absolute;\n  bottom: 1rem;\n  background-color: ${({ theme }): string => theme.success};\n`;\n\nconst Version = styled.p`\n  width: 100%;\n  text-align: center;\n`;\n\nconst App: React.FC = () => {\n  const [current] = useAppMachine();\n  const [updateAvailable, setUpdateAvailable] = React.useState(false);\n  const [\n    waitingWorker,\n    setWaitingWorker,\n  ] = React.useState<ServiceWorker | null>(null);\n\n  const onSWUpdate = (registration: ServiceWorkerRegistration): void => {\n    setUpdateAvailable(true);\n    setWaitingWorker(registration.waiting);\n  };\n\n  React.useEffect(() => {\n    serviceWorker.register({ onUpdate: onSWUpdate });\n  }, []);\n\n  const reload = (): void => {\n    waitingWorker?.postMessage({ type: \"SKIP_WAITING\" });\n    setUpdateAvailable(false);\n    window.location.reload(true);\n  };\n\n  return (\n    <Container data-testid=\"App\">\n      <Header />\n      <Actions />\n      <Announcements>\n        {current.context.announcementTimes.map((config) => (\n          <AnnouncementConfig key={config.id} config={config} />\n        ))}\n      </Announcements>\n\n      <Refresh\n        id=\"updateVersionButton\"\n        onClick={reload}\n        hidden={!updateAvailable}\n      >\n        Refresh for update\n      </Refresh>\n      <Version>Version: {version}</Version>\n    </Container>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport NoSleep from \"nosleep.js\";\nimport { render } from \"react-dom\";\nimport { ThemeProvider } from \"./theme\";\nimport App from \"./App\";\nimport { AppMachineProvider } from \"contexts/machine\";\n\nconst rootElement = document.getElementById(\"root\");\nconst noSleep = new NoSleep();\n\nrender(\n  <ThemeProvider>\n    <AppMachineProvider\n      config={{\n        services: {\n          noSleep: () => (): (() => void) => {\n            noSleep.enable();\n\n            return (): void => {\n              noSleep.disable();\n            };\n          },\n        },\n      }}\n    >\n      <App />\n    </AppMachineProvider>\n  </ThemeProvider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.register({});\n"],"sourceRoot":""}