{"version":3,"sources":["utils.ts","machine.ts","theme.tsx","index.tsx"],"names":["secsToMS","seconds","minsToMS","minutes","padStart","R","maxLength","char","s","hoursMinutesSeconds","t","Math","floor","formatTime","String","machineConfig","initial","id","context","initialTime","currentTime","notificationTimes","states","idle","on","START","RESET","actions","SET_TIME","SET_NOTIFICATION_TIMES","internal","running","invoke","src","target","cond","STOP","COUNT_DOWN","machineOptions","setNotifications","assign","event","type","payload","setTime","time","countDown","reset","services","timer","cb","interval","setInterval","clearInterval","Machine","colors","injectGlobal","commonTheme","error","success","themeLight","background","body","primary","primaryAlt","themeDark","defaultThemeContext","mode","setTheme","ThemeContext","React","styled","emotionStyled","Header","div","Button","button","theme","Time","h2","Actions","NotificationConfig","rootElement","document","getElementById","render","children","state","hasMounted","setThemeState","lsMode","localStorage","getItem","useEffectDarkMode","themeState","Provider","value","light","dark","useMachine","plantNotifications","startedAt","Date","getTime","timeouts","map","config","setTimeout","speakable","SpeechSynthesisUtterance","message","hours","msg","speakableTime","now","window","speechSynthesis","speak","forEach","clearTimeout","current","send","changeNotifications","i","e","draft","checked","Number","fresh","disabled","matches","onClick","push","key","htmlFor","onChange"],"mappings":"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","file":"static/js/main.7c9a87ab.chunk.js","sourcesContent":["import * as R from \"ramda\";\n\nexport const secsToMS = (seconds: number): number => seconds * 1000;\n\nexport const minsToMS = (minutes: number): number => secsToMS(minutes * 60);\n\nexport const padStart = R.curry(\n  (maxLength: number, char: string, s: string) => {\n    return s.padStart(maxLength, char);\n  }\n);\n\nexport const hoursMinutesSeconds = R.juxt([\n  (t: number): number => Math.floor((t / (1000 * 60 * 60)) % 24),\n  (t: number): number => Math.floor((t / (1000 * 60)) % 60),\n  (t: number): number => Math.floor((t / 1000) % 60)\n]);\n\nexport const speakableTime = (time: number): string => {\n  const [hours, minutes, seconds] = hoursMinutesSeconds(time);\n  let msg = \"\";\n  if (hours > 0) {\n    msg += `${hours} hour${hours === 1 ? \"\" : \"s\"}. `;\n  }\n  if (minutes > 0) {\n    msg += `${minutes} minute${minutes === 1 ? \"\" : \"s\"}. `;\n  }\n  if (seconds > 0) {\n    msg += `${seconds} second${seconds === 1 ? \"\" : \"s\"}`;\n  }\n  return msg;\n};\n\nexport const formatTime = R.pipe(\n  hoursMinutesSeconds,\n  R.map(R.pipe(String, padStart(2, \"0\"))),\n  R.join(\":\")\n);\n","import { MachineConfig, MachineOptions, assign, Machine } from \"xstate\";\nimport { minsToMS, secsToMS } from \"./utils\";\n\ntype Schema = {\n  states: {\n    idle: {};\n    running: {};\n  };\n};\n\ntype StartEvent = {\n  type: \"START\";\n};\ntype SetTimeEvent = {\n  type: \"SET_TIME\";\n  payload: { time: number };\n};\ntype SetNotificationsTimesEvent = {\n  type: \"SET_NOTIFICATION_TIMES\";\n  payload: { notificationTimes: NotificationConfig[] };\n};\ntype Event =\n  | StartEvent\n  | SetTimeEvent\n  | SetNotificationsTimesEvent\n  | { type: \"STOP\" }\n  | { type: \"COUNT_DOWN\" }\n  | { type: \"RESET\" };\n\ntype NotificationConfig = { time: number; interval: boolean; message?: string };\ntype Context = {\n  initialTime: number;\n  currentTime: number;\n  notificationTimes: NotificationConfig[];\n};\n\nexport const machineConfig: MachineConfig<Context, Schema, Event> = {\n  initial: \"idle\",\n  id: \"main\",\n  context: {\n    initialTime: minsToMS(6),\n    currentTime: minsToMS(6),\n    notificationTimes: []\n  },\n  states: {\n    idle: {\n      on: {\n        START: \"running\",\n        RESET: {\n          actions: [\"reset\"]\n        },\n        SET_TIME: {\n          actions: [\"setTime\"]\n        },\n        SET_NOTIFICATION_TIMES: {\n          internal: false,\n          actions: [\"setNotifications\"]\n        }\n      }\n    },\n    running: {\n      invoke: [\n        { src: \"timer\", id: \"timer\" },\n        { src: \"plantNotifications\", id: \"plantNotifications\" }\n      ],\n      on: {\n        \"\": {\n          target: \"idle\",\n          cond: ({ currentTime }): boolean => currentTime <= 0\n        },\n        STOP: \"idle\",\n        COUNT_DOWN: {\n          actions: [\"countDown\"]\n        }\n      }\n    }\n  }\n};\n\nexport const machineOptions: Partial<MachineOptions<Context, Event>> = {\n  actions: {\n    setNotifications: assign<Context, Event>({\n      notificationTimes: (context, event) => {\n        if (event.type === \"SET_NOTIFICATION_TIMES\") {\n          return event.payload.notificationTimes;\n        }\n        return context.notificationTimes;\n      }\n    }),\n    setTime: assign<Context, Event>({\n      initialTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.initialTime,\n      currentTime: (context, event) =>\n        event.type === \"SET_TIME\" ? event.payload.time : context.currentTime\n    }),\n    countDown: assign<Context, Event>({\n      currentTime: context => context.currentTime - secsToMS(1)\n    }),\n    reset: assign<Context, Event>({\n      currentTime: context => context.initialTime\n    })\n  },\n  services: {\n    timer: () => (cb): (() => void) => {\n      const interval = setInterval(() => {\n        cb(\"COUNT_DOWN\");\n      }, secsToMS(1));\n      return (): void => {\n        clearInterval(interval);\n      };\n    }\n  }\n};\n\nexport default Machine(machineConfig, machineOptions);\n","import * as React from \"react\";\nimport emotionStyled, { CreateStyled } from \"@emotion/styled\";\nimport { injectGlobal } from \"emotion\";\nimport { ThemeProvider as EmotionProvider } from \"emotion-theming\";\n\nconst colors = {\n  white: \"#FBFEF9\",\n  gray: \"#F3EFF5\",\n  black: \"#1C2826\",\n  red: \"#ef3054\",\n  green: \"#43AA8B\",\n  cerullean: \"#3454D1\",\n  lightBlue: \"#715AFF\",\n  darkBlue: \"#0E0E52\",\n  salmon: \"#F49390\"\n};\n\ninjectGlobal`\n  html, body {\n    padding: 0;\n    margin: 0;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\ninterface CommonTheme {\n  error: string;\n  success: string;\n}\n\nexport type Theme = CommonTheme & {\n  background: string;\n  body: string;\n  primary: string;\n  primaryAlt: string;\n};\n\nconst commonTheme: CommonTheme = {\n  error: colors.red,\n  success: colors.green\n};\n\nconst themeLight: Theme = {\n  ...commonTheme,\n  background: colors.gray,\n  body: colors.black,\n  primary: colors.salmon,\n  primaryAlt: colors.white\n};\n\nconst themeDark: Theme = {\n  ...commonTheme,\n  background: colors.black,\n  body: colors.white,\n  primary: colors.cerullean,\n  primaryAlt: colors.white\n};\n\nconst theme = (mode: ThemeContext[\"mode\"]): Theme =>\n  mode === \"dark\" ? themeDark : themeLight;\n\ninterface ThemeContext {\n  mode: \"dark\" | \"light\";\n  setTheme: (mode?: ThemeContext[\"mode\"]) => void;\n}\n\nconst defaultThemeContext: ThemeContext = {\n  mode: \"dark\",\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setTheme: () => {}\n};\n\nconst ThemeContext = React.createContext(defaultThemeContext);\nexport const useTheme = (): ThemeContext => React.useContext(ThemeContext);\n\ntype UseEffectDarkMode = Pick<ThemeContext, \"mode\"> & { hasMounted: boolean };\nconst useEffectDarkMode = (): [\n  UseEffectDarkMode,\n  React.Dispatch<React.SetStateAction<UseEffectDarkMode>>\n] => {\n  const state = React.useState<UseEffectDarkMode>({\n    mode: defaultThemeContext.mode,\n    hasMounted: false\n  });\n  const [, setThemeState] = state;\n\n  React.useEffect(() => {\n    const lsMode = (localStorage.getItem(\"mode\") ||\n      \"dark\") as ThemeContext[\"mode\"];\n    setThemeState(state => ({ ...state, mode: lsMode, hasMounted: true }));\n  }, [setThemeState]);\n\n  return state;\n};\n\nexport const ThemeProvider: React.FC<{}> = ({ children }) => {\n  const [themeState, setThemeState] = useEffectDarkMode();\n  if (!themeState.hasMounted) {\n    return <div />;\n  }\n\n  const setTheme = (mode?: ThemeContext[\"mode\"]): void => {\n    const nextThemes = {\n      light: \"dark\",\n      dark: \"light\"\n    };\n    if (!mode) {\n      mode = nextThemes[themeState.mode] as ThemeContext[\"mode\"];\n    }\n    setThemeState(state => ({ ...state, mode } as UseEffectDarkMode));\n  };\n\n  return (\n    <EmotionProvider theme={theme(themeState.mode)}>\n      <ThemeContext.Provider\n        value={{\n          mode: themeState.mode,\n          setTheme\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    </EmotionProvider>\n  );\n};\n\nexport const styled = emotionStyled as CreateStyled<Theme>;\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { useMachine } from \"@xstate/react\";\nimport Machine from \"./machine\";\nimport { ThemeProvider, styled } from \"./theme\";\nimport { secsToMS, formatTime, speakableTime } from \"./utils\";\n\nconst Header = styled.div`\n  padding: 1rem;\n`;\n\nconst Button = styled.button`\n  background-color: ${({ theme }): string => theme.primary};\n  color: ${({ theme }): string => theme.primaryAlt};\n  border: none;\n  padding: 0.5rem 1rem;\n  font-family: inherit;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 414px;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:hover,\n  &:focus {\n    filter: brightness(0.75);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\n\nconst Time = styled.h2`\n  font-size: 3rem;\n  text-align: center;\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 1rem;\n  justify-content: space-between;\n`;\n\nconst NotificationConfig = styled.div`\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.25);\n  border-radius: 6px;\n  padding: 1.5rem;\n  width: 100%;\n  max-width: 414px;\n  margin-bottom: 1rem;\n  overflow: hidden;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  label {\n    display: flex;\n    align-items: center;\n    font-size: 1.5rem;\n    input {\n      font-size: 1.5rem;\n      flex: 1;\n    }\n  }\n`;\n\nconst App: React.FC<{}> = () => {\n  const [current, send] = useMachine(Machine, {\n    services: {\n      plantNotifications: context => (): (() => void) => {\n        const startedAt = new Date().getTime();\n        const getTime = (): number => {\n          const now = new Date().getTime();\n          // HACK not sure why but without the - 1000 the announcement occurs at\n          // the right time but announces a second less than the desired time\n          return context.initialTime - (now - startedAt - 1000);\n        };\n\n        const timeouts = context.notificationTimes.map(config => {\n          const timingFn = config.interval ? setInterval : setTimeout;\n          const id = timingFn(() => {\n            const speakable = new SpeechSynthesisUtterance(\n              config.message || speakableTime(getTime())\n            );\n            window.speechSynthesis.speak(speakable);\n          }, secsToMS(config.time));\n          return { ...config, id };\n        });\n\n        return (): void => {\n          timeouts.forEach(config => {\n            const clearTimingFn = config.interval\n              ? clearInterval\n              : clearTimeout;\n            clearTimingFn(config.id);\n          });\n        };\n      }\n    }\n  });\n\n  const changeNotifications = (i: number) => (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const draft = [...current.context.notificationTimes];\n    switch (e.target.type) {\n      case \"checkbox\": {\n        draft[i].interval = e.target.checked;\n        break;\n      }\n      case \"number\": {\n        draft[i].time = Number(e.target.value);\n        break;\n      }\n      case \"text\": {\n        draft[i].message = e.target.value;\n        break;\n      }\n    }\n    send({\n      type: \"SET_NOTIFICATION_TIMES\",\n      payload: { notificationTimes: draft }\n    });\n  };\n\n  const addNotification = (): void => {\n    const draft = [...current.context.notificationTimes];\n    draft.push({ time: 0, interval: false });\n    send({\n      type: \"SET_NOTIFICATION_TIMES\",\n      payload: { notificationTimes: draft }\n    });\n  };\n  const fresh = current.context.initialTime === current.context.currentTime;\n\n  return (\n    <div>\n      <Header>\n        <h1>Workout Timer</h1>\n        <Time>{formatTime(current.context.currentTime)}</Time>\n      </Header>\n\n      <Actions>\n        <Button\n          disabled={current.matches(\"running\")}\n          onClick={(): void => {\n            send(\"START\");\n          }}\n        >\n          Start\n        </Button>\n        <Button\n          disabled={!current.matches(\"running\")}\n          onClick={(): void => {\n            send(\"STOP\");\n          }}\n        >\n          Stop\n        </Button>\n\n        <Button\n          disabled={fresh || current.matches(\"running\")}\n          onClick={(): void => {\n            send(\"RESET\");\n          }}\n        >\n          Reset\n        </Button>\n        <Button\n          onClick={addNotification}\n          disabled={!fresh || current.matches(\"running\")}\n        >\n          Add Notification\n        </Button>\n        {current.context.notificationTimes.map((config, i) => (\n          <NotificationConfig key={`${i}`}>\n            <label htmlFor={`seconds:${i}`}>\n              Seconds:{\" \"}\n              <input\n                disabled={current.matches(\"running\")}\n                type=\"number\"\n                value={config.time}\n                onChange={changeNotifications(i)}\n              />\n            </label>\n            <label htmlFor={`interval:${i}`}>\n              Interval:{\" \"}\n              <input\n                disabled={current.matches(\"running\")}\n                id={`interval:${i}`}\n                type=\"checkbox\"\n                checked={config.interval}\n                onChange={changeNotifications(i)}\n              />\n            </label>\n            <label htmlFor={`message:${i}`}>\n              Message:{\" \"}\n              <input\n                disabled={current.matches(\"running\")}\n                id={`interval:${i}`}\n                type=\"text\"\n                value={config.message || \"\"}\n                onChange={changeNotifications(i)}\n              />\n            </label>\n          </NotificationConfig>\n        ))}\n      </Actions>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  rootElement\n);\n"],"sourceRoot":""}